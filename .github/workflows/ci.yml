# Nom du flow
name: CI/CD Pipeline – Magasin Web Microservices with Saga and Event

# Nom de la branch push sur et pull
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Repo Docker Hub : <SlitherinSnake>/lab7-magasin-api-microservice-saga-event
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/lab7-magasin-api-microservice-saga-event

jobs:
# ──────────────────────────── INSTALL SHARED MODULES ────────────────────────────
  install-shared-modules:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and install event-infrastructure
        working-directory: lab7-magasin-api-microservice-saga-event/event-infrastructure
        run: mvn install -DskipTests

# ──────────────────────────── LINT ────────────────────────────
  lint:
    needs: install-shared-modules
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          discovery-server,
          api-gateway,
          frontend-service,
          inventory-service,
          transaction-service,
          store-service,
          saga-orchestrator-service
        ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with: { java-version: '21', distribution: 'temurin' }

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Lint ${{ matrix.service }} (Run Checkstyle)
        working-directory: lab7-magasin-api-microservice-saga-event/${{ matrix.service }}
        run: mvn --batch-mode -q verify -DskipTests
        
# ──────────────────────────── TEST ────────────────────────────
  test:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        service: [
          discovery-server,
          api-gateway,
          frontend-service,
          inventory-service,
          transaction-service,
          store-service,
          saga-orchestrator-service
        ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with: { java-version: '21', distribution: 'temurin' }

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run Maven tests for ${{ matrix.service }}
        working-directory: lab7-magasin-api-microservice-saga-event/${{ matrix.service }}
        run: mvn --batch-mode clean test

      - name: Generate test report for ${{ matrix.service }}
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Maven Tests - ${{ matrix.service }}
          path: lab7-magasin-api-microservice-saga-event/${{ matrix.service }}/target/surefire-reports/*.xml
          reporter: java-junit

# ──────────────────────────── BUILD DOCKER ────────────────────────────
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build docker-compose stack
        working-directory: lab7-magasin-api-microservice-saga-event
        run: docker compose -f docker-compose.yml build --parallel

      - name: Verify all services are built
        working-directory: lab7-magasin-api-microservice-saga-event
        run: |
          echo "Verifying Docker images..."
          docker images | grep -E "(discovery-server|api-gateway|frontend-service|inventory-service|transaction-service|store-service|saga-orchestrator-service)"

# ──────────────────────────── INTEGRATION TESTS ────────────────────────────
  integration-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services for integration testing
        working-directory: lab7-magasin-api-microservice-saga-event
        run: |
          docker compose up -d postgres redis discovery-server
          sleep 30
          docker compose up -d api-gateway inventory-service transaction-service store-service saga-orchestrator-service
          sleep 60

      - name: Wait for services to be healthy
        working-directory: lab7-magasin-api-microservice-saga-event
        run: |
          echo "Waiting for services to be healthy..."
          timeout 300 bash -c 'until docker compose ps | grep -E "(healthy|running)"; do sleep 10; done'

      - name: Run integration tests
        working-directory: lab7-magasin-api-microservice-saga-event
        run: |
          # Test service discovery
          curl -f http://localhost:8761/actuator/health || exit 1
          
          # Test API Gateway
          curl -f http://localhost:8765/actuator/health || exit 1
          
          # Test all microservices
          curl -f http://localhost:8081/actuator/health || exit 1  # inventory
          curl -f http://localhost:8082/actuator/health || exit 1  # transaction
          curl -f http://localhost:8083/actuator/health || exit 1  # store
          curl -f http://localhost:8085/actuator/health || exit 1  # saga-orchestrator
          
          # Test Saga Orchestrator API
          curl -f http://localhost:8085/api/saga/health || echo "Saga API endpoint not available yet"

      - name: Run Saga integration tests
        working-directory: lab7-magasin-api-microservice-saga-event/Tests
        run: |
          if [ -f "integration-tests.sh" ]; then
            chmod +x integration-tests.sh
            ./integration-tests.sh
          else
            echo "Integration test script not found, skipping..."
          fi

      - name: Collect logs on failure
        if: failure()
        working-directory: lab7-magasin-api-microservice-saga-event
        run: |
          echo "=== Docker Compose Logs ==="
          docker compose logs --tail=100
          echo "=== Service Status ==="
          docker compose ps

      - name: Cleanup
        if: always()
        working-directory: lab7-magasin-api-microservice-saga-event
        run: docker compose down -v

# ──────────────────────────── PUBLISH DOCKER HUB ────────────────────────────
  publish:
    runs-on: ubuntu-latest
    needs: integration-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    strategy:
      matrix:
        service: [
          discovery-server,
          api-gateway,
          frontend-service,
          inventory-service,
          transaction-service,
          store-service,
          saga-orchestrator-service
        ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push ${{ matrix.service }}
        working-directory: lab7-magasin-api-microservice-saga-event
        run: |
          DATE_TAG=$(date +%Y-%m-%d)
          SERVICE_IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/lab6-${{ matrix.service }}"
          
          # Build the service
          docker compose build ${{ matrix.service }}
          
          # Tag the image
          docker tag lab7-magasin-api-microservice-saga-event-${{ matrix.service }} $SERVICE_IMAGE:latest
          docker tag lab7-magasin-api-microservice-saga-event-${{ matrix.service }} $SERVICE_IMAGE:$DATE_TAG
          docker tag lab7-magasin-api-microservice-saga-event-${{ matrix.service }} $SERVICE_IMAGE:${{ github.sha }}
          
          # Push all tags
          docker push $SERVICE_IMAGE:latest
          docker push $SERVICE_IMAGE:$DATE_TAG
          docker push $SERVICE_IMAGE:${{ github.sha }}

  # ──────────────────────────── PUBLISH COMPLETE STACK ────────────────────────────
  publish-stack:
    runs-on: ubuntu-latest
    needs: publish
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push complete stack
        working-directory: lab7-magasin-api-microservice-saga-event
        run: |
          DATE_TAG=$(date +%Y-%m-%d)
          
          # Build all services
          docker compose build
          
          # Tag and push the main API Gateway as the primary image
          docker tag lab7-magasin-api-microservice-saga-event-api-gateway $IMAGE_NAME:latest
          docker tag lab7-magasin-api-microservice-saga-event-api-gateway $IMAGE_NAME:$DATE_TAG
          docker tag lab7-magasin-api-microservice-saga-event-api-gateway $IMAGE_NAME:${{ github.sha }}
          
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$DATE_TAG
          docker push $IMAGE_NAME:${{ github.sha }}

  # ──────────────────────────── SECURITY SCAN ────────────────────────────
  security-scan:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        service: [
          discovery-server,
          api-gateway,
          frontend-service,
          inventory-service,
          transaction-service,
          store-service,
          saga-orchestrator-service
        ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build ${{ matrix.service }} for scanning
        working-directory: lab7-magasin-api-microservice-saga-event
        run: docker compose build ${{ matrix.service }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'lab7-magasin-api-microservice-saga-event-${{ matrix.service }}'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Create deployment manifest
        working-directory: lab7-magasin-api-microservice-saga-event
        run: |
          DATE_TAG=$(date +%Y-%m-%d)
          cat > deployment-manifest.yml << EOF
          # Lab6 Magasin API Microservices with Saga Pattern
          # Build: ${{ github.sha }}
          # Date: $DATE_TAG
          
          services:
            discovery-server: ${{ secrets.DOCKERHUB_USERNAME }}/lab6-discovery-server:$DATE_TAG
            api-gateway: ${{ secrets.DOCKERHUB_USERNAME }}/lab6-api-gateway:$DATE_TAG
            frontend-service: ${{ secrets.DOCKERHUB_USERNAME }}/lab6-frontend-service:$DATE_TAG
            inventory-service: ${{ secrets.DOCKERHUB_USERNAME }}/lab6-inventory-service:$DATE_TAG
            transaction-service: ${{ secrets.DOCKERHUB_USERNAME }}/lab6-transaction-service:$DATE_TAG
            store-service: ${{ secrets.DOCKERHUB_USERNAME }}/lab6-store-service:$DATE_TAG
            saga-orchestrator-service: ${{ secrets.DOCKERHUB_USERNAME }}/lab6-saga-orchestrator-service:$DATE_TAG
          EOF
          
          echo "Deployment manifest created:"
          cat deployment-manifest.yml

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-manifest-${{ github.sha }}
          path: |
            lab7-magasin-api-microservice-saga-event/deployment-manifest.yml
            lab7-magasin-api-microservice-saga-event/docker-compose.yml
            lab7-magasin-api-microservice-saga-event/prometheus.yml
            lab7-magasin-api-microservice-saga-event/alert_rules.yml

  # ──────────────────────────── NOTIFICATION ────────────────────────────
  notify:
    runs-on: ubuntu-latest
    needs: [publish-stack, security-scan]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.publish-stack.result }}" == "success" && "${{ needs.security-scan.result }}" == "success" ]]; then
            echo " Lab6 Microservices with Saga Pattern deployed successfully!"
            echo " Services available:"
            echo "  - Discovery Server: http://localhost:8761"
            echo "  - API Gateway: http://localhost:8765"
            echo "  - Frontend: http://localhost:8080"
            echo "  - Inventory Service: http://localhost:8081"
            echo "  - Transaction Service: http://localhost:8082"
            echo "  - Store Service: http://localhost:8083"
            echo "  - Saga Orchestrator: http://localhost:8085"
            echo "  - Grafana: http://localhost:3000"
            echo "  - Prometheus: http://localhost:9090"
          else
            echo " Deployment failed or security issues found"
            echo "Publish result: ${{ needs.publish-stack.result }}"
            echo "Security scan result: ${{ needs.security-scan.result }}"
          fi
