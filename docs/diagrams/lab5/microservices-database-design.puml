@startuml microservices-database-design
title Architecture de base de données - Microservices

!theme plain
skinparam backgroundColor #f8f9fa
skinparam database {
  BackgroundColor #e8f5e8
  BorderColor #388e3c
}
skinparam package {
  BackgroundColor #e3f2fd
  BorderColor #1976d2
}

' === PostgreSQL Cluster ===
database "PostgreSQL Server\n:5432" as PostgreSQLServer {
  
  ' === Gateway Database ===
  package "gateway_db" as GatewayDB {
    entity "api_keys" as ApiKeys {
      - id : BIGSERIAL
      - key_name : VARCHAR(100)
      - key_value : VARCHAR(255)
      - service_name : VARCHAR(50)
      - created_at : TIMESTAMP
      - is_active : BOOLEAN
    }
    
    entity "rate_limits" as RateLimits {
      - id : BIGSERIAL
      - endpoint : VARCHAR(200)
      - limit_per_minute : INTEGER
      - current_count : INTEGER
      - reset_time : TIMESTAMP
    }
    
    entity "gateway_logs" as GatewayLogs {
      - id : BIGSERIAL
      - request_id : VARCHAR(100)
      - method : VARCHAR(10)
      - path : VARCHAR(500)
      - status_code : INTEGER
      - response_time : BIGINT
      - timestamp : TIMESTAMP
      - user_agent : TEXT
      - ip_address : INET
    }
  }
  
  ' === Inventory Database ===
  package "inventory_db" as InventoryDB {
    entity "inventory_items" as InventoryItems {
      - id : BIGSERIAL
      - nom : VARCHAR(100)
      - categorie : VARCHAR(50)
      - prix : DECIMAL(10,2)
      - description : TEXT
      - stock_central : INTEGER
      - stock_minimum : INTEGER
      - date_derniere_maj : DATE
      - is_active : BOOLEAN
      - created_at : TIMESTAMP
      - updated_at : TIMESTAMP
    }
    
    entity "categories" as Categories {
      - id : BIGSERIAL
      - nom : VARCHAR(50)
      - description : TEXT
      - is_active : BOOLEAN
    }
    
    entity "stock_movements" as StockMovements {
      - id : BIGSERIAL
      - inventory_item_id : BIGINT
      - movement_type : VARCHAR(20)
      - quantity : INTEGER
      - previous_stock : INTEGER
      - new_stock : INTEGER
      - reason : VARCHAR(200)
      - timestamp : TIMESTAMP
      - created_by : BIGINT
    }
    
    InventoryItems }o--|| Categories : belongs_to
    StockMovements }o--|| InventoryItems : references
  }
  
  ' === Transaction Database ===
  package "transaction_db" as TransactionDB {
    entity "transactions" as Transactions {
      - id : BIGSERIAL
      - type_transaction : VARCHAR(20)
      - date_transaction : DATE
      - montant_total : DECIMAL(10,2)
      - personnel_id : BIGINT
      - store_id : BIGINT
      - transaction_originale_id : BIGINT
      - motif_retour : TEXT
      - statut : VARCHAR(20)
      - created_at : TIMESTAMP
      - updated_at : TIMESTAMP
    }
    
    entity "transaction_items" as TransactionItems {
      - id : BIGSERIAL
      - transaction_id : BIGINT
      - inventory_item_id : BIGINT
      - quantite : INTEGER
      - prix_unitaire : DECIMAL(10,2)
      - sous_total : DECIMAL(10,2)
      - created_at : TIMESTAMP
    }
    
    entity "payments" as Payments {
      - id : BIGSERIAL
      - transaction_id : BIGINT
      - payment_method : VARCHAR(20)
      - amount : DECIMAL(10,2)
      - payment_status : VARCHAR(20)
      - payment_date : TIMESTAMP
      - reference : VARCHAR(100)
    }
    
    TransactionItems }o--|| Transactions : belongs_to
    Payments }o--|| Transactions : belongs_to
    Transactions }o--o| Transactions : original_transaction
  }
  
  ' === Store Database ===
  package "store_db" as StoreDB {
    entity "stores" as Stores {
      - id : BIGSERIAL
      - nom : VARCHAR(100)
      - adresse : TEXT
      - ville : VARCHAR(50)
      - code_postal : VARCHAR(10)
      - telephone : VARCHAR(20)
      - email : VARCHAR(100)
      - manager_id : BIGINT
      - is_active : BOOLEAN
      - created_at : TIMESTAMP
      - updated_at : TIMESTAMP
    }
    
    entity "store_inventory" as StoreInventory {
      - id : BIGSERIAL
      - store_id : BIGINT
      - inventory_item_id : BIGINT
      - stock_local : INTEGER
      - stock_minimum : INTEGER
      - last_restock : DATE
      - updated_at : TIMESTAMP
    }
    
    entity "store_configurations" as StoreConfigurations {
      - id : BIGSERIAL
      - store_id : BIGINT
      - config_key : VARCHAR(100)
      - config_value : TEXT
      - updated_at : TIMESTAMP
    }
    
    StoreInventory }o--|| Stores : belongs_to
    StoreConfigurations }o--|| Stores : belongs_to
  }
  
  ' === Personnel Database ===
  package "personnel_db" as PersonnelDB {
    entity "personnel" as Personnel {
      - id : BIGSERIAL
      - nom : VARCHAR(50)
      - prenom : VARCHAR(50)
      - email : VARCHAR(100)
      - telephone : VARCHAR(20)
      - role : VARCHAR(20)
      - store_id : BIGINT
      - date_embauche : DATE
      - salaire : DECIMAL(10,2)
      - is_active : BOOLEAN
      - created_at : TIMESTAMP
      - updated_at : TIMESTAMP
    }
    
    entity "user_sessions" as UserSessions {
      - id : BIGSERIAL
      - personnel_id : BIGINT
      - session_token : VARCHAR(255)
      - login_time : TIMESTAMP
      - logout_time : TIMESTAMP
      - ip_address : INET
      - user_agent : TEXT
      - is_active : BOOLEAN
    }
    
    entity "permissions" as Permissions {
      - id : BIGSERIAL
      - personnel_id : BIGINT
      - resource : VARCHAR(100)
      - action : VARCHAR(50)
      - granted : BOOLEAN
      - granted_at : TIMESTAMP
      - granted_by : BIGINT
    }
    
    UserSessions }o--|| Personnel : belongs_to
    Permissions }o--|| Personnel : belongs_to
  }
}

' === Services et leurs bases ===
rectangle "Services" as Services {
  component "API Gateway\n:8765" as Gateway
  component "Inventory Service\n:8081" as InventoryService
  component "Transaction Service\n:8082" as TransactionService
  component "Store Service\n:8083" as StoreService
  component "Personnel Service\n:8084" as PersonnelService
}

' === Connexions ===
Gateway --> GatewayDB : JDBC
InventoryService --> InventoryDB : JPA/Hibernate
TransactionService --> TransactionDB : JPA/Hibernate
StoreService --> StoreDB : JPA/Hibernate
PersonnelService --> PersonnelDB : JPA/Hibernate

' === Cross-service References ===
note top of TransactionDB
  **Références cross-services:**
  • personnel_id → Personnel Service
  • store_id → Store Service
  • inventory_item_id → Inventory Service
  
  **Communication via APIs REST**
  (pas de foreign keys cross-DB)
end note

note top of StoreDB
  **Références cross-services:**
  • manager_id → Personnel Service
  • inventory_item_id → Inventory Service
  
  **Consistency via APIs**
end note

' === Database Configuration ===
note bottom of PostgreSQLServer
  **Configuration PostgreSQL:**
  • Version: PostgreSQL 14
  • Connection pooling: HikariCP
  • Isolation level: READ_COMMITTED
  • Timeout: 30 secondes
  • Max connections: 20 par service
  
  **Volumes persistants:**
  • postgres_data:/var/lib/postgresql/data
  • init-db.sql pour initialisation
end note

' === Migration et Schema ===
note right of Services
  **Migration de schéma:**
  • Flyway/Liquibase par service
  • Migrations versionnées
  • Rollback automatique
  • Schema evolution indépendante
  
  **Backup strategy:**
  • Backup par base de données
  • Point-in-time recovery
  • Cross-service consistency
end note

' === Data Consistency ===
note bottom of Services
  **Consistency patterns:**
  • Eventual consistency
  • Saga pattern pour transactions distribuées
  • Idempotency pour retry logic
  • Circuit breaker pour resilience
end note

@enduml
